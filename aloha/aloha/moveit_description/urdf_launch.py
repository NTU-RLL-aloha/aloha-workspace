from typing import List, Optional, Text, Union

from launch import LaunchContext, SomeSubstitutionsType
from launch.actions import DeclareLaunchArgument
from launch.substitutions import (
    Command,
    EnvironmentVariable,
    FindExecutable,
    LaunchConfiguration,
    PathJoinSubstitution,
    TextSubstitution,
)
from launch_ros.substitutions import FindPackageShare


class DeclareInterbotixXSArmRobotDescriptionLaunchArgument(DeclareLaunchArgument):
    """Generate a URDF of an Arm through a modified DeclareLaunchArgument object."""

    def __init__(
        self,
        *,
        robot_description_launch_config_name: Text = 'robot_description',
        robot_model_launch_config_name: Text = 'robot_model',
        robot_name_launch_config_name: Text = 'robot_name',
        default_value: Optional[SomeSubstitutionsType] = None,
        **kwargs
    ) -> None:
        """
        Construct the modified DeclareLaunchArgument object.

        :param robot_description_launch_config_name: Name of the robot description launch
            configuration. This is typically only changed when multiple arms are to be launched.
            Defaults to `robot_description`
        :param robot_model_launch_config_name: Name of the robot model launch configuration.
            This is typically only changed when multiple arms are to be launched. Defaults to
            `robot_model`
        :param robot_name_launch_config_name: Name of the robot name launch configuration.
            This is typically only changed when multiple arms are to be launched. Defaults to
            `robot_name`
        :param default_value: The default model given to the parent DeclareLaunchArgument; if you
            want to override this value, it must follow the convention in this object's source
        """
        if default_value is None:
            default_value = Command([
                FindExecutable(name='xacro'), ' ',
                PathJoinSubstitution([
                    FindPackageShare('aloha'),
                    'config',
                    'moveit',
                    'urdf',
                    LaunchConfiguration(robot_model_launch_config_name)
                ]), '.urdf.xacro ',
                'robot_name:=', LaunchConfiguration(robot_name_launch_config_name), ' ',
                'base_link_frame:=', LaunchConfiguration('base_link_frame'), ' ',
                'use_gripper:=', LaunchConfiguration('use_gripper'), ' ',
                'show_ar_tag:=', LaunchConfiguration('show_ar_tag'), ' ',
                'show_gripper_bar:=', LaunchConfiguration('show_gripper_bar'), ' ',
                'show_gripper_fingers:=', LaunchConfiguration('show_gripper_fingers'), ' ',
                'use_world_frame:=', LaunchConfiguration('use_world_frame'), ' ',
                'external_urdf_loc:=', LaunchConfiguration('external_urdf_loc'), ' ',
                'hardware_type:=', LaunchConfiguration('hardware_type'), ' ',
            ]),
        super().__init__(
            name=robot_description_launch_config_name,
            default_value=default_value,
            description=(
                'URDF of the robot; this is typically generated by the xacro command.'
            ),
            choices=None,
            **kwargs,
        )


def declare_interbotix_xsarm_robot_description_launch_arguments(
    *,
    base_link_frame: Text = 'base_link',
    use_gripper: Text = 'true',
    show_ar_tag: Text = 'false',
    show_gripper_bar: Text = 'true',
    show_gripper_fingers: Text = 'true',
    use_world_frame: Text = 'true',
    external_urdf_loc: Text = '',
    hardware_type: Text = 'actual',
    robot_description_launch_config_name: Text = 'robot_description',
    robot_model_launch_config_name: Text = 'robot_model',
    robot_name_launch_config_name: Text = 'robot_name',
) -> List[DeclareLaunchArgument]:
    """
    Return a robot description DeclareLaunchArgument and its required children.

    DeclareLaunchArgument objects:
        - `base_link_frame`
        - `use_gripper`
        - `show_ar_tag`
        - `show_gripper_bar`
        - `show_gripper_fingers`
        - `use_world_frame`
        - `external_urdf_loc`
        - `hardware_type`

    :details: Include this in your LaunchDescription by appending its output to the list of
        DeclareLaunchArguments
    """
    return [
        DeclareLaunchArgument(
            'base_link_frame',
            default_value=TextSubstitution(text=base_link_frame),
            description=(
                "name of the 'root' link on the arm; typically `base_link`, but can be changed if "
                'attaching the arm to a mobile base that already has a `base_link` frame.'
            ),
        ),
        DeclareLaunchArgument(
            'use_gripper',
            default_value=TextSubstitution(text=use_gripper),
            choices=('true', 'false'),
            description=(
                'if `true`, the default gripper is included in the `robot_description`; '
                'if `false`, it is left out; set to `false` if not using the default gripper.'
            ),
        ),
        DeclareLaunchArgument(
            'show_ar_tag',
            default_value=show_ar_tag,
            choices=('true', 'false'),
            description=(
                'if `true`, the AR tag mount is included in the `robot_description`; if '
                '`false`, it is left out; set to `true` if using the AR tag mount in your project.'
            ),
        ),
        DeclareLaunchArgument(
            'show_gripper_bar',
            default_value=show_gripper_bar,
            choices=('true', 'false'),
            description=(
                'if `true`, the gripper_bar link is included in the `robot_description`;'
                ' if `false`, the gripper_bar and finger links are not loaded. Set to `false` if '
                'you have a custom gripper attachment.'
            ),
        ),
        DeclareLaunchArgument(
            'show_gripper_fingers',
            default_value=show_gripper_fingers,
            choices=('true', 'false'),
            description=(
                'if `true`, the gripper fingers are included in the `robot_description`; '
                'if `false`, the gripper finger links are not loaded. Set to `false` if you have '
                'custom gripper fingers.'
            ),
        ),
        DeclareLaunchArgument(
            'use_world_frame',
            default_value=use_world_frame,
            choices=('true', 'false'),
            description=(
                "set this to `true` if you would like to load a 'world' frame to the "
                "`robot_description` which is located exactly at the 'base_link' frame "
                'of the robot; if using multiple robots or if you would like to attach the '
                "'base_link' frame of the robot to a different frame, set this to `false`."
            ),
        ),
        DeclareLaunchArgument(
            'external_urdf_loc',
            default_value=TextSubstitution(text=external_urdf_loc),
            description=(
                'the file path to the custom urdf.xacro file that you would like to include in the'
                " Interbotix robot's urdf.xacro file."
            ),
        ),
        DeclareLaunchArgument(
            'hardware_type',
            choices=(
                'actual',
                'fake',
                'gz_classic',
            ),
            default_value=hardware_type,
            description=(
                'configures the `robot_description` to use the actual hardware, fake '
                'hardware, or hardware simulated in Gazebo.'
            ),
        ),
        DeclareInterbotixXSArmRobotDescriptionLaunchArgument(
            robot_description_launch_config_name=robot_description_launch_config_name,
            robot_model_launch_config_name=robot_model_launch_config_name,
            robot_name_launch_config_name=robot_name_launch_config_name,
        ),
    ]

