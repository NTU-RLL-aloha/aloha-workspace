from typing import Text, List, Optional

from launch import SomeSubstitutionsType
from launch.actions import DeclareLaunchArgument
from launch.substitutions import (
    Command, 
    LaunchConfiguration,
    PathJoinSubstitution,
    TextSubstitution,
    FindExecutable,
)
from launch_ros.substitutions import FindPackageShare


class DeclareInterbotixXSArmRobotDescriptionSemanticLaunchArgument(DeclareLaunchArgument):
    """Generate a URDF of an Arm through a modified DeclareLaunchArgument object."""

    def __init__(
        self,
        *,
        robot_semantic_launch_config_name: Text = 'robot_semantic',
        robot_model_launch_config_name: Text = 'robot_model',
        robot_name_launch_config_name: Text = 'robot_name',
        default_value: Optional[SomeSubstitutionsType] = None,
        **kwargs
    ) -> None:
        """
        Construct the modified DeclareLaunchArgument object.

        :param robot_semantic_launch_config_name: Name of the robot description launch
            configuration. This is typically only changed when multiple arms are to be launched.
            Defaults to `robot_description`
        :param robot_model_launch_config_name: Name of the robot model launch configuration.
            This is typically only changed when multiple arms are to be launched. Defaults to
            `robot_model`
        :param robot_name_launch_config_name: Name of the robot name launch configuration.
            This is typically only changed when multiple arms are to be launched. Defaults to
            `robot_name`
        :param default_value: The default model given to the parent DeclareLaunchArgument; if you
            want to override this value, it must follow the convention in this object's source
        """
        if default_value is None:
            default_value = Command([
                FindExecutable(name='xacro'), ' ',
                PathJoinSubstitution([
                    FindPackageShare('aloha'),
                    'config',
                    'moveit',
                    'srdf',
                    LaunchConfiguration(robot_model_launch_config_name)
                ]), '.srdf.xacro ',
                'robot_name:=', LaunchConfiguration(robot_name_launch_config_name), ' ',
                'base_link_frame:=', LaunchConfiguration('base_link_frame'), ' ',
                'show_ar_tag:=', LaunchConfiguration('show_ar_tag'), ' ',
                'external_urdf_loc:=', LaunchConfiguration('external_srdf_loc'), ' ',
                'check_distance:=', LaunchConfiguration('check_distance'), ' ',
            ]),
        super().__init__(
            name=robot_semantic_launch_config_name,
            default_value=default_value,
            description=(
                'SRDF of the robot; this is typically generated by the xacro command.'
            ),
            choices=None,
            **kwargs,
        )
    

def declare_interbotix_xsarm_robot_description_semantic_launch_arguments(
    *,
    base_link_frame: Text = 'base_link',
    show_ar_tag: Text = 'false',
    external_srdf_loc: Text = '',
    robot_description_semantic_launch_config_name: Text = 'robot_semantic',
    robot_model_launch_config_name: Text = 'robot_model',
    robot_name_launch_config_name: Text = 'robot_name',
) -> List[DeclareLaunchArgument]:
    return [
        DeclareLaunchArgument(
            'base_link_frame',
            default_value=TextSubstitution(text=base_link_frame),
            description=(
                "name of the 'root' link on the arm; typically `base_link`, but can be changed if "
                'attaching the arm to a mobile base that already has a `base_link` frame.'
            ),
        ),
        DeclareLaunchArgument(
            'show_ar_tag',
            default_value=show_ar_tag,
            choices=('true', 'false'),
            description=(
                'if `true`, the AR tag mount is included in the `robot_description`; if '
                '`false`, it is left out; set to `true` if using the AR tag mount in your project.'
            ),
        ),
        DeclareLaunchArgument(
            'external_srdf_loc',
            default_value=TextSubstitution(text=external_srdf_loc),
            description=(
                'the file path to the custom surdf.xacro file that you would like to include in the'
                " Interbotix robot's srdf.xacro file."
            ),
        ),
        DeclareLaunchArgument(
            'check_distance',
            default_value='true',
            description='Whether to check distance between the two robots',
        ),
        DeclareInterbotixXSArmRobotDescriptionSemanticLaunchArgument(
            robot_semantic_launch_config_name=robot_description_semantic_launch_config_name,
            robot_model_launch_config_name=robot_model_launch_config_name,
            robot_name_launch_config_name=robot_name_launch_config_name,
        ),
    ]
    


